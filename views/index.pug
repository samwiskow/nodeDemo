extends layout

block head

    script(src = "/javascripts/sql-parser.min.js")
    script.
        let tables = "#{tables}".split(",");
        let columns = "#{columns}".split(",");
        function runQuery() {
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    var data = JSON.parse(this.responseText)
                    console.log(data);
                    if (data.error) {
                        var div = document.getElementById("statementTab");
                        var table = document.getElementById("resultsTable");
                        table.innerHTML = "";
                        // console.log("ERROR: ")
                        // console.log(data.error);
                        div.innerHTML = data.error.code + "</br>" + "</br>" + data.error.sqlMessage;
                        var tr = $("<tr></tr>");
                        tr.append()

                    } else {
                        var headers = data.headers;
                        var table = document.getElementById("resultsTable");
                        var div = document.getElementById("statementTab");
                        div.innerHTML = "";
                        table.innerHTML = "";

                        var tr = $("<tr></tr>");
                        for (var i = 0; i < headers.length; i++) {
                            tr.append("<th>" + headers[i].name + "</th>")
                            //console.log(headers[i].name);
                        }
                        //console.log(tr)
                        table.appendChild(tr[0]);


                        var result = data.result;
                        for (var i = 0; i < result.length; i++) {
                            tr = $("<tr></tr>");
                            for (var j = 0; j < headers.length; j++) {
                                tr.append("<td>" + result[i][headers[j].name] + "</td>")
                            }
                            table.append(tr[0]);
                        }
                        //console.log("TABLE: ");
                        //console.log(table);
                    }
                }
            };

            let sql = document.getElementById("textarea").innerHTML;
            console.log(sql);
            if (new RegExp(/<+|>+|&gt;|&lt;/g).test(sql)){
                console.log("regex match");
                xhttp.open("GET", "/query?query=" + encodeURIComponent(document.getElementById("textarea").innerHTML), true);
                xhttp.send();
            } else{
                try {
                    SQLParser.parse(sql);
                    console.log("successfully parsed");
                    xhttp.open("GET", "/query?query=" + encodeURIComponent(document.getElementById("textarea").innerHTML), true);
                    xhttp.send();
                } catch (err) {
                    var table = document.getElementById("resultsTable");
                    // console.log("error parsing");
                    console.log(err);
                    table.innerHTML = "</br>" + err + "</br></br>" + "Are there any blocks missing from your statement?";
                }
            }
        }

    //script(src="/javascripts/runQuery.js")
    script(src = "https://code.jquery.com/jquery-3.3.1.min.js",
        integrity = "sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=",
        crossorigin = "anonymous")
    script(src = "/javascripts/blockly_compressed.js")
    script(src = "/javascripts/blocks_compressed.js")
    script(src = "/javascripts/javascript_compressed.js")
    script(src = "https://blockly-demo.appspot.com/static/msg/js/en.js")
    script(src = "/blockly/blockDefinitions.js")
    script(src = "/blockly/blockGenerators.js")
    //script(src="/blockly/workspace.js")

    include toolbox

    //xml(id="workspaceBlocks" style="display: none")



block content

    div#mainContent
        div#blocklyArea content
        div#resultsTab

            div#bottomright
                p#textarea
                button#queryBtn(type='button' onclick='runQuery()') Run SQL Query
                p#statementTab(style="margin=1em")
            div#topright
                h3 Results
                table#resultsTable(style="margin=1em")

        //p Copyrighted by Sam Wiskow
    div#blocklyDiv(style="position: absolute; height:1%; width:1%;")

    script.
        // var workspace = Blockly.inject('blocklyDiv',
        //         {toolbox: document.getElementById('toolbox')});
        var blocklyArea = document.getElementById('blocklyArea');
        var blocklyDiv = document.getElementById('blocklyDiv');
        var workspace = Blockly.inject(blocklyDiv,
            {toolbox: document.getElementById('toolbox')});
        Blockly.defineBlocksWithJsonArray(blocksJson);
        var onresize = function (e) {
            // Compute the absolute coordinates and dimensions of blocklyArea.
            var element = blocklyArea;
            var x = 0;
            var y = 0;
            do {
                x += element.offsetLeft;
                y += element.offsetTop;
                element = element.offsetParent;
            } while (element);
            // Position blocklyDiv over blocklyArea.
            blocklyDiv.style.left = x + 'px';
            blocklyDiv.style.top = y + 'px';
            blocklyDiv.style.width = blocklyArea.offsetWidth + 'px';
            blocklyDiv.style.height = blocklyArea.offsetHeight + 'px';
            Blockly.svgResize(workspace);
        };
        window.addEventListener('resize', onresize, false);
        onresize();
        Blockly.svgResize(workspace);

        function myUpdateFunction(event) {
            var code = Blockly.JavaScript.workspaceToCode(workspace);
            var liveSql = document.getElementById('textarea');
            liveSql.innerHTML = code;
            //console.log(code);
        }
        Blockly.mainWorkspace.addChangeListener(Blockly.Events.disableOrphans);
        workspace.addChangeListener(myUpdateFunction);

